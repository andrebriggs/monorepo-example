# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#Set this when scaffolding
#Name will appear as part of the specific instance build name in the ADO UI
#name: 'service-C'
variables:
- group: MyVarGroup
- name: directoryName
  value: service-C

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - '/service-C/*'

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    # echo Add other tasks to build, test, and deploy your project.
    # echo See https://aka.ms/yaml
    printenv | sort
    pwd
    ls -la
    echo "The name of this service is: $(BUILD.BUILDNUMBER)"
  displayName: 'Run a multi-line script'

- script: |
    # Login to Azure 
    echo "az login --service-principal --username $(SP_APP_ID) --password $(SP_PASS) --tenant $(SP_TENANT)"
    az login --service-principal --username "$(SP_APP_ID)" --password "$(SP_PASS)" --tenant "$(SP_TENANT)"
  #workingDirectory: '$(modulePath)'
  displayName: 'Azure Login'

- script: |
    # Use ACR build task to build and push
    cd service-A
    echo "az acr build -r $(ACR_NAME) --image $(Build.DefinitionName):$(build.SourceBranchName)-$(build.BuildId) ."
    az acr build -r $(ACR_NAME) --image $(Build.DefinitionName):$(build.SourceBranchName)-$(build.BuildId) .
  #workingDirectory: '$(modulePath)'
  displayName: 'ACR Build and Publish'

- script: echo Hello, world!
  displayName: 'Run a one-line script'